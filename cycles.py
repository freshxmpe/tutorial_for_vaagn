# конструкция for element in iter_obj:
# где `element` это "имя переменной, которой присваивается очередное значение итерируемой коллекции"
# iter_obj итерируемый объект
# называется `циклом`
for i in [1, 1.0, '""', [], (), {}]:
    # глобальная функция type возвращает тип переданного ей аргумента
    print(i, " has type of ", type(i))

# это пример цикла который последовательно переюирает список
# и на каждой итерации присвавает переменной `i` новое значение

# в python также имеются и более простые формы циклов
# как и в `C` можно объявить цикл с условием с помощью ключевого слова `while`
a = 10
b = 0
while b < a:
    b += 1
    print(a, b)

# цикл создается по простому образцу `while <условие>`
# если условие истинно цикл выполняет итерацию, если ложно прерывает ее
# очень лекго ошибиться и создать бесконечный цикл
while 1 > 0:
    print('этот цикл не когда не завершится') 
    break # ломает цикл иначе он будет бесконечным, попробуй обрать эту строку)

# обычно если еть необходимость использовать беконечный цикл пишут следующую конструкцию
while True: # то же самое что и предыдущий пример, только лексически полее грамотно
    break


# пример бесконечного цикла
secret_password = '0000'
while True: # пока Правда, то есть всегда
    entered_password = input('please enter password: ') # просить пользователя ввести пароль
    if entered_password == secret_password: # если введенный пароль совпадает с нашим
        print('welcome') # добро пожаловать
        break # не забываем прерываеть цикл
    else: # иначе попробую снова)
        print('wrong password! try again')

# чтобы консоль сразу не закрывалась
input()
